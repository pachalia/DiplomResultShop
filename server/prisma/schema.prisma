generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid())
    email     String    @unique
    password  String
    provider  Provider?
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    role      Role
    token     Token[]
    carts     Cart?
    address   Address?
    orders    Order[]

    @@map("users")
}

model Token {
    token     String @unique
    exp       Float
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    userAgent String @map("user_agent")

    @@map("tokens")
}

model Category {
    name    String    @id
    product Product[]

    @@map("categories")
}

model Product {
    id          String      @id @default(uuid())
    name        String
    description String?
    price       Float
    quantity    Float?
    image       String?
    category_id String
    category    Category    @relation(fields: [category_id], references: [name], onDelete: Cascade)
    cartsItem   CartItem?
    orderItems  OrderItem[]

    @@map("products")
}

//Хранит информацию о корзинах пользователей
model Cart {
    id     String     @id @default(uuid())
    user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String     @unique @map("user_id")
    carts  CartItem[]

    @@map("carts")
}

//Хранит информацию о товарах в корзинах.
model CartItem {
    id        String  @id @default(uuid())
    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId    String  @map("cart_id")
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @unique @map("product_id")
    quantity  Float

    @@map("carts_item")
}

model Address {
    id      String @id @default(uuid())
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String @unique @map("user_id")
    city    String
    state   String
    street  String
    zipCode String @map("zip_code")
    phone   String

    @@map("address")
}

model Order {
    id         String      @id @default(uuid())
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @map("user_id")
    orderItems OrderItem?
    status     OrderStatus @default(PENDING)
    createdAt  DateTime    @default(now()) @map("created_at")

    @@map("orders")
}

model OrderItem {
    id        String  @id @default(uuid())
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String  @unique @map("order_id")
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @map("product_id")
    quantity  Float
    price     Float

    @@map("order_items")
}

enum Role {
    ADMIN
    MANAGER
    CUSTOMER
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVIRED
    CANCELLED
}

enum Provider {
    GOOGLE
    YANDEX
}
